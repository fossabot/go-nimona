// Code generated by mockery v1.0.0. DO NOT EDIT.
package net

import context "context"
import mock "github.com/stretchr/testify/mock"
import net "net"

// MockWire is an autogenerated mock type for the Messenger type
type MockWire struct {
	mock.Mock
}

// HandleExtensionEvents provides a mock function with given fields: extension, h
func (_m *MockWire) HandleExtensionEvents(extension string, h EventHandler) error {
	ret := _m.Called(extension, h)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, EventHandler) error); ok {
		r0 = rf(extension, h)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Listen provides a mock function with given fields: addr
func (_m *MockWire) Listen(addr string) (net.Listener, string, error) {
	ret := _m.Called(addr)

	var r0 net.Listener
	if rf, ok := ret.Get(0).(func(string) net.Listener); ok {
		r0 = rf(addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Listener)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(addr)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(addr)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Pack provides a mock function with given fields: extension, payloadType, payload, recipient, hideSender, hideRecipients
func (_m *MockWire) Pack(extension string, payloadType string, payload interface{}, recipient string, hideSender bool, hideRecipients bool) ([]byte, error) {
	ret := _m.Called(extension, payloadType, payload, recipient, hideSender, hideRecipients)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, string, interface{}, string, bool, bool) []byte); ok {
		r0 = rf(extension, payloadType, payload, recipient, hideSender, hideRecipients)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, interface{}, string, bool, bool) error); ok {
		r1 = rf(extension, payloadType, payload, recipient, hideSender, hideRecipients)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Send provides a mock function with given fields: ctx, extension, payloadType, payload, recipients
func (_m *MockWire) Send(ctx context.Context, extension string, payloadType string, payload interface{}, recipients []string) error {
	ret := _m.Called(ctx, extension, payloadType, payload, recipients)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, []string) error); ok {
		r0 = rf(ctx, extension, payloadType, payload, recipients)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
