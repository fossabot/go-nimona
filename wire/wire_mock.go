// Code generated by mockery v1.0.0. DO NOT EDIT.
package wire

import context "context"
import mock "github.com/stretchr/testify/mock"
import net "github.com/nimona/go-nimona/net"

// MockWire is an autogenerated mock type for the Wire type
type MockWire struct {
	mock.Mock
}

// GetAddresses provides a mock function with given fields:
func (_m *MockWire) GetAddresses() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Handle provides a mock function with given fields: _a0
func (_m *MockWire) Handle(_a0 net.HandlerFunc) net.HandlerFunc {
	ret := _m.Called(_a0)

	var r0 net.HandlerFunc
	if rf, ok := ret.Get(0).(func(net.HandlerFunc) net.HandlerFunc); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.HandlerFunc)
		}
	}

	return r0
}

// HandleExtensionEvents provides a mock function with given fields: extension, h
func (_m *MockWire) HandleExtensionEvents(extension string, h EventHandler) error {
	ret := _m.Called(extension, h)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, EventHandler) error); ok {
		r0 = rf(extension, h)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *MockWire) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Negotiate provides a mock function with given fields: _a0
func (_m *MockWire) Negotiate(_a0 net.NegotiatorFunc) net.NegotiatorFunc {
	ret := _m.Called(_a0)

	var r0 net.NegotiatorFunc
	if rf, ok := ret.Get(0).(func(net.NegotiatorFunc) net.NegotiatorFunc); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.NegotiatorFunc)
		}
	}

	return r0
}

// Send provides a mock function with given fields: ctx, extention, payloadType, payload, to
func (_m *MockWire) Send(ctx context.Context, extention string, payloadType string, payload interface{}, to []string) error {
	ret := _m.Called(ctx, extention, payloadType, payload, to)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, []string) error); ok {
		r0 = rf(ctx, extention, payloadType, payload, to)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
