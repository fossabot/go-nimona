// Code generated by mockery v1.0.0. DO NOT EDIT.
package net

import (
	context "context"
	"net"

	mock "github.com/stretchr/testify/mock"
)

// MockMessenger is an autogenerated mock type for the Messenger type
type MockMessenger struct {
	mock.Mock
}

// HandleExtensionEvents provides a mock function with given fields: extension, h
func (_m *MockMessenger) HandleExtensionEvents(extension string, h EventHandler) error {
	ret := _m.Called(extension, h)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, EventHandler) error); ok {
		r0 = rf(extension, h)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Listen provides a mock function with given fields: addr
func (_m *MockMessenger) Listen(addr string) (net.Listener, string, error) {
	ret := _m.Called(addr)

	var r0 net.Listener
	if rf, ok := ret.Get(0).(func(string) net.Listener); ok {
		r0 = rf(addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Listener)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(addr)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(addr)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Send provides a mock function with given fields: ctx, message
func (_m *MockMessenger) Send(ctx context.Context, message *Message) error {
	ret := _m.Called(ctx, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Message) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
