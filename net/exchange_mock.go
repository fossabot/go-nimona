// Code generated by mockery v1.0.0. DO NOT EDIT.
package net

import (
	context "context"
	"net"

	blocks "github.com/nimona/go-nimona/blocks"
	mock "github.com/stretchr/testify/mock"
)

// MockExchange is an autogenerated mock type for the Exchange type
type MockExchange struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockExchange) Get(ctx context.Context, id string) (*blocks.Block, error) {
	ret := _m.Called(ctx, id)

	var r0 *blocks.Block
	if rf, ok := ret.Get(0).(func(context.Context, string) *blocks.Block); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blocks.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLocalBlocks provides a mock function with given fields:
func (_m *MockExchange) GetLocalBlocks() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Handle provides a mock function with given fields: contentType, h
func (_m *MockExchange) Handle(contentType string, h BlockHandler) error {
	ret := _m.Called(contentType, h)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, BlockHandler) error); ok {
		r0 = rf(contentType, h)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Listen provides a mock function with given fields: ctx, addrress
func (_m *MockExchange) Listen(ctx context.Context, addrress string) (net.Listener, error) {
	ret := _m.Called(ctx, addrress)

	var r0 net.Listener
	if rf, ok := ret.Get(0).(func(context.Context, string) net.Listener); ok {
		r0 = rf(ctx, addrress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Listener)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, addrress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterDiscoverer provides a mock function with given fields: discovery
func (_m *MockExchange) RegisterDiscoverer(discovery Discoverer) {
	_m.Called(discovery)
}

// Send provides a mock function with given fields: ctx, block, recipients
func (_m *MockExchange) Send(ctx context.Context, block *blocks.Block, recipients ...string) error {
	_va := make([]interface{}, len(recipients))
	for _i := range recipients {
		_va[_i] = recipients[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, block)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *blocks.Block, ...string) error); ok {
		r0 = rf(ctx, block, recipients...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
