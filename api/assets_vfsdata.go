// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package api // import "nimona.io/go/api"

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 10, 27, 12, 59, 5, 749368211, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2018, 10, 27, 12, 59, 5, 749000000, time.UTC),
			uncompressedSize: 6594,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x6f\x73\xdb\x36\xd2\x7f\xfd\xf4\x53\x6c\xe9\xe7\x4a\x29\x12\x49\x29\x1e\xc7\x35\x2d\x29\xd3\x3f\xf6\xb4\xbd\x34\x77\x73\xce\xb4\x2f\x1c\x77\x06\x22\x57\x12\x62\x10\x60\x00\x50\xb2\x92\xf8\xbb\xdf\x00\xa4\x48\x90\x92\x5c\x5f\xef\xdd\x59\x19\x0f\x03\xec\x2e\x76\x7f\xbb\xfb\xc3\x52\x9e\x7c\x1d\x04\xf0\x3d\x51\x98\x82\xe0\xb0\xd2\x3a\x57\x71\x14\xcd\x99\x58\x86\x1a\x49\xa6\x25\xe2\x4a\x14\x0a\xc3\x44\x64\x11\xe1\x01\xe5\x5a\x8a\xb4\x48\x34\x15\x3c\xd0\x22\xd8\xe0\x5c\x89\xe4\x1e\xb5\x82\x20\x98\x7d\x35\x59\xe9\x8c\xcd\xbe\x02\x98\xac\x90\xa4\xe6\x01\x60\xa2\xf4\x96\x61\xf9\x0c\xf0\x62\x08\x2f\xe2\x39\x2e\x84\x44\xf3\x44\x16\x1a\x25\x7c\xae\x36\x01\x82\x4c\x7c\x0a\xe6\xe2\x21\x50\xf4\x13\xe5\xcb\x18\xe6\x42\xa6\x28\xcd\xd2\x65\x23\xb4\xc1\xf9\x3d\xd5\x7f\x2a\xf7\xf4\xfe\xe3\x57\xd5\x83\xf1\xd9\x71\x61\x21\xb8\x0e\x16\x24\xa3\x6c\x1b\xc3\x4f\xc8\xd6\xa8\x69\x42\x86\xf0\x9d\xa4\x84\x0d\x41\x11\xae\x02\x85\x92\x2e\x2e\xdb\x2a\x8a\x7e\xc2\x18\xc6\xa3\xd1\xdf\x1c\x0f\x48\x72\xbf\x94\xa2\xe0\x69\x0c\x27\xa7\xa7\xa7\x7b\x67\x9f\xe4\x64\x89\xc1\x46\x92\x3c\x6f\xe1\xb0\xa1\xa9\x5e\xc5\xf0\xea\x6c\x94\x3f\x1c\x31\x77\x7d\x7d\xdd\xec\xe4\x24\x4d\x6d\x9c\x63\xcc\x9a\xd5\x8c\xc8\x25\xe5\x76\x11\x48\xa1\x85\x0b\x8d\x85\x43\x8b\x3c\x86\xb3\xfc\x01\x94\x60\x34\x85\x93\x57\x17\xc9\xf9\xf9\x69\x07\xc1\x15\x49\xc5\x26\x86\x11\xbc\xcc\x1f\x60\x3c\xca\x1f\x40\x2e\xe7\xa4\x37\x1a\xda\x4f\xf8\x6d\x7f\x1f\xd1\xb1\x13\x4a\xe9\x44\x79\xd4\x68\x1f\x00\xa5\x89\x2e\x54\x17\xff\x12\xcc\x51\x78\x21\xf7\xe3\x09\xe6\x42\x6b\x91\xc5\x30\x76\x36\x6b\x83\xa1\xc8\x91\x3b\xe6\x12\xc1\x84\x8c\x61\x29\x11\xf9\xbe\x70\xc2\x84\xa9\xfd\x3d\x71\x89\xa9\x23\x5c\x3d\x15\x6e\x99\x30\xaa\x74\x60\x4b\x3b\x06\x2e\x38\xee\xa3\x3e\x3a\x90\x9e\xd1\xc1\xa2\x19\x85\x17\x67\x87\x62\x29\x18\x30\xea\x9c\xd9\x98\x09\x8d\x3c\x8c\xc2\xf3\xb3\x16\x40\x75\x95\x57\x00\x35\x99\xbd\xba\xba\x3a\x6c\x3e\x5e\x50\xa9\x74\x90\xac\x28\x73\x71\x70\x0b\xe4\x39\x66\x20\xa5\xeb\x98\xeb\x55\x69\xa8\xf7\xb2\xef\xd8\xd2\xf8\xa0\x03\xb1\x46\xb9\x60\xa6\x90\x90\x31\x9a\x2b\xaa\x1a\xb7\x37\x2b\xaa\x31\x50\x39\x49\x2c\x98\xa6\x1d\x9a\xcd\x46\x71\x45\xd3\xf4\x40\x12\xcb\xf3\x55\x4e\xdc\xb4\xa7\x54\xe5\x8c\x6c\x63\xa0\x9c\x51\x8e\xc1\x9c\x89\xe4\xfe\xb2\xdb\x5f\x17\xad\xf6\xb2\x19\xd9\x20\x5d\xae\xb4\x21\x0c\x96\x5e\x76\xcb\xe2\xe4\xe2\xe2\xe2\x48\x06\xcf\x5b\x89\xb0\x21\x6b\x49\xb8\x5a\x08\x99\xc5\x50\x98\xfe\x4e\x88\x72\xca\x84\xa1\xd6\x28\x6d\xd4\x65\xe7\xe6\xfb\xd4\x14\x2a\xe4\xda\xcd\x4a\x4d\x00\xc1\xce\xa3\xeb\x73\xf3\xd9\xef\xab\x0c\x95\x32\xdc\x62\xce\x3f\xd2\x8d\xe3\xf0\x60\xd5\x19\xdf\x89\x44\xb2\x4f\x47\x6d\x72\xeb\x54\xe3\x61\x3a\x3c\x50\x9e\xad\x82\xfa\xf1\xc2\x7c\xf6\x2a\x58\x92\x94\x16\x2a\x86\xd3\xbc\xcb\xe7\x15\x1b\x51\xae\x50\xc3\xc8\x9a\x1a\x37\x94\x04\xd5\xbf\x70\xdc\x77\x1a\x92\xf2\x60\x55\xa5\x75\x3c\x6a\xa5\xfc\x39\x8c\x42\x79\x5e\xe8\xff\x1d\x30\x9e\x11\xf1\xbc\xd0\x5a\xfc\x07\xdd\xf4\xb4\x9f\x65\x98\x6d\x8e\x7c\x82\xe4\x1d\x24\x5f\x19\x92\x6b\xdd\x68\x55\xd5\x5b\xc2\x38\xc0\xb8\x30\x0a\x5f\x9e\xed\x37\x22\x61\x74\xc9\x63\x48\x90\x6b\x94\x47\xae\xd3\xef\xbf\x33\x9f\xe7\x50\xa9\xc3\x01\x1d\xc4\x6e\xf5\x36\xc7\xa9\xa7\x8a\x79\x46\xb5\x77\x77\xb0\x71\x63\x38\xf9\xf6\xd5\xfc\xf4\x65\xfa\x9c\xa3\xce\xd2\xf3\x74\xbc\x38\x72\x5a\xbc\x32\xd4\xe8\x1c\x22\x0c\x95\xe8\xad\x65\xa3\x33\x07\xb3\x42\x2a\x03\x5a\x2e\xa8\x1b\x7f\x6d\x8d\x1c\x1b\x7e\x32\xc1\x85\x25\xe5\x0e\x9c\x29\x26\x42\x12\x33\x02\x76\xd3\x5a\xa5\xa7\x1d\x60\x7d\x50\x2e\xf1\x49\x2e\x5b\xae\x84\xd2\x9d\xd4\xee\x77\x89\xa2\x6c\xed\x66\xb1\x19\x7d\xcc\x68\xf2\xf2\x40\x7b\xc7\xad\xd5\x86\x5c\x3f\x28\xc1\x83\x7b\xdc\xee\x5f\xff\x73\x29\x36\x07\xa6\x05\xab\xb0\x26\xac\xc0\x7d\x15\x4e\xd6\xdb\x23\x1a\x4a\x4b\xca\x97\xfb\x2a\x82\xd1\x35\x36\x3a\xe6\xf7\x24\x72\xa6\xe5\x89\x4a\x24\xcd\xf5\x6e\x74\x8e\x22\x83\xa0\xd6\x5b\xc8\x25\xe5\xda\x98\x5c\x48\x91\xd9\xa9\x3d\x8e\xa2\x0f\x6a\x41\xd3\x94\x61\xc8\x51\x47\x05\x7f\x73\xf3\x4b\xb4\x23\xb0\x05\xf4\xbe\x66\x74\x2e\x89\xdc\xf6\x6b\x27\xd6\x44\x42\xb5\x08\x53\xf8\xfc\x78\xb9\x73\xba\x5a\xb4\xbe\x9b\x9d\x5a\x43\x62\xce\x48\x62\xb2\xb1\x28\xb8\x7d\x05\xe8\x65\x44\x27\xab\x21\xe4\x3f\xf3\x14\xb9\x1e\x42\xfe\x77\xdc\x0e\x21\xff\xcd\x4c\xca\xf9\x15\x4f\xdd\x31\x60\x77\xa8\x41\x7c\x0a\xfe\xc4\xde\xd8\x09\x23\x4a\x4d\x77\x99\x98\xf9\x97\x7b\xe2\x6b\xc2\x0e\x8a\xdb\x3c\x1c\x52\x50\x5a\x1e\x54\x28\xd3\x70\x48\xc3\xc8\x57\x21\xc0\x97\x2f\xe0\x77\x44\x0c\x7e\x26\xb0\x7e\x6b\x15\xac\x9a\x84\x81\x0d\x68\x60\x43\x0f\x2b\x88\x7a\xd1\xad\x17\xc3\x5d\xb4\x1c\x82\xef\xf7\x61\x00\xfe\x24\x32\xee\xcc\x62\x38\x64\xfb\x37\xc2\x8e\xd9\xb6\x9b\xb7\xa3\x3b\x98\x4e\xc1\xf7\x7c\x78\x6d\xc3\x8b\x0d\x2a\xc6\xae\xd9\x75\xcc\x77\x8c\x4b\xd4\x85\xe4\x95\x9d\x2b\x9e\x96\xc1\xf5\xdb\x42\x8f\xc3\xa6\x95\x6c\x79\xfd\xd3\x54\x97\x93\x63\x31\xff\x70\x28\x8d\x06\xd3\x37\x94\x23\x4c\x21\xfa\xa3\x07\x2f\xfa\x3d\xef\xf6\xfd\xe6\x6e\xe0\xc5\xd0\x7f\xdd\xf3\x6e\xff\xf0\xee\x5e\x78\x5f\x6e\xdf\x6f\xc2\x41\x70\xf7\xa2\xff\xba\x77\x3b\xbc\xfd\x7c\xd7\x7f\xfd\xff\x51\xb6\x3c\xe8\xe6\x2f\x37\xff\x78\x1b\x96\x49\xa2\x8b\xad\x39\x76\x08\xbc\x60\x6c\x08\xa7\x5d\x74\x1a\x9c\xbf\xb1\x18\x7f\x43\xb2\xfc\xd2\xef\x37\xcb\xef\xdf\x7b\xe5\xc6\xc7\x42\xe8\x4b\xff\xb8\xfe\xa4\x14\x63\xba\xa5\x3e\x2b\x57\x97\x4f\xa9\xee\xe2\x1f\xb6\x1a\x66\xb7\x2d\xbb\x28\xd7\xff\x7b\xbc\xdc\x75\x7a\xdd\xdd\x93\xa8\x7c\x5d\x36\x8f\x73\x91\x6e\xab\xf6\x4f\xe9\x1a\x68\x3a\xf5\xdc\x77\x44\x6f\xc7\x06\x93\xd5\xe9\xec\x2d\xcd\x04\x27\x50\xbf\x84\x03\x3e\x90\x2c\x67\x38\x89\x56\xa7\xb5\xdc\xce\x4a\xf9\xa2\xe5\xcd\x7e\x10\x9c\x63\x62\xe8\x23\x0c\xc3\x49\x94\xd2\xf5\x6c\xd7\xf9\x13\x3b\x2c\x1a\x61\x77\x7a\xf4\x80\xd8\x42\x98\x7a\x27\x1e\x64\xa8\x57\xc2\xf8\x24\x94\xae\x7d\x01\x98\xd4\x43\xa3\xa3\xed\x81\x85\x62\x25\x58\x8a\x72\xea\xfd\x2e\xa9\x46\xd8\x8a\x42\x42\x25\x00\x2b\x94\x18\x86\xa1\x07\x12\x3f\x16\x54\x62\x3a\x9b\x44\x3b\x4b\x8e\xf1\x72\x02\x33\x96\x25\x26\x34\xa7\xc8\x75\xc7\xf6\xbf\x76\xeb\xbe\x32\xed\xd8\x18\x84\xc8\xb1\x53\xcd\x35\xad\x5b\x7a\x76\x83\x3c\x85\x5f\x4b\x87\x26\x51\x29\x52\x83\x17\x19\x00\x1a\x7c\x0a\xe6\xc6\xa7\xbc\xd9\x24\x2a\x58\x95\x2d\x07\xc9\x0e\x71\x17\xd2\x32\xd8\x46\xc5\x51\xe4\x0f\x98\x48\xec\xdd\x19\x9a\xdb\x8e\x93\x0c\x07\xbd\x7a\x29\x17\x52\xc3\x6b\xf0\x63\x47\xcc\xac\xc5\xa6\x6d\x07\x7e\x44\x72\x1a\xad\xc7\x91\xd2\x12\x49\xa6\x22\x6e\xf3\x1f\x52\x11\x55\x1e\xf9\x35\x89\x6f\x28\x4f\xc5\x26\x14\x9c\x09\x92\xc2\xb4\xe9\x66\xb7\x95\x4d\x1b\xdb\x94\x4f\x21\x15\x49\x91\x21\xd7\xe1\x12\xf5\x15\x43\xf3\xf8\xfd\xf6\xe7\xb4\xe7\xbb\x95\xe0\x52\x87\xd1\xad\xf6\xae\x29\xb2\xf4\x19\x36\xba\xea\x75\x32\xff\xd4\x40\x2d\x79\xc4\x03\xf5\x86\x2a\xfd\x0c\x0f\x54\x57\xbf\xec\x9b\x9b\xf2\x3b\x88\x27\xf4\xcb\xe6\x31\xda\xcd\x4c\xbc\x93\xfd\x58\xa0\xdc\xde\x20\xc3\x44\x0b\xd9\xf3\x4d\x03\xfb\xfd\x90\xa4\xe9\xd5\x1a\xb9\x36\x9e\x21\x47\xd9\xf3\x13\x46\x93\x7b\x7f\xd8\xa4\x02\xdb\xb4\x6a\xae\x02\x0c\x35\x91\x4b\xd4\xa1\xbd\xb7\xde\x92\x0c\x43\x2d\xde\x88\x0d\xca\x1f\x88\xc2\x5e\x1f\xa6\xe6\x1e\x30\xd7\xbe\xdf\xe5\xe4\x36\x9a\x61\x39\xa6\x4c\xa1\xb6\x98\x12\x4d\x14\xea\xf0\x1e\xb7\x2e\x35\x39\xc4\xe4\x46\x97\xc0\x14\x38\x6e\xe0\x77\x9c\xdf\x58\x8c\x7a\x85\x64\x0e\x78\x49\x28\xb8\xfd\xa6\xc5\x29\x2d\x34\xf1\xb6\xdd\x72\xf1\x0d\x29\xe7\x28\x7f\x7a\xf7\xeb\x1b\xd3\x0d\x15\x0d\x61\x0a\x5a\xc4\xe0\xc3\x00\xac\x7a\x98\x14\x52\x22\xd7\xef\x4a\xa7\x0b\xc9\x2e\x8f\x99\xab\x21\x32\xe6\x8c\x2f\xce\xed\xf7\xe8\x84\x62\x2a\x37\x14\xbc\xec\xf7\x96\xbf\x6d\x5f\x31\xcc\xa5\xf5\xe1\x47\x5c\x90\x82\xe9\x5e\x8b\xc2\x4d\xb5\x98\xd4\xc2\xb4\x55\xf6\x25\xce\x5d\xc1\x3a\x17\xe6\x16\x3f\x90\x97\x3d\xc3\xe6\x7d\xaa\x35\x6b\x99\x1f\xc3\x53\x31\x78\x7b\x5d\xee\x0d\x5b\x62\x39\xd9\x9a\x26\x8f\x3b\xda\x60\xdd\x8d\xed\xef\xe1\xb1\x1b\xbf\x55\x38\x71\xf3\x38\x3c\x58\x21\x76\x06\x75\x5b\xae\x9d\xd2\x09\xa3\xd5\xbc\x65\x78\x1a\xe9\x1a\x53\x6f\xe6\xc3\xa0\xad\xef\x9b\x1b\x69\x66\xa7\xb3\x59\x45\xbb\xf1\x6e\x7c\x81\x41\x09\x45\x58\xc5\x14\x5a\xc4\xed\x7c\x63\x94\x9e\xb4\xf5\x4e\xec\xcc\x4c\x08\xac\x24\x2e\xec\x7d\x55\xf9\x63\x3a\xc6\x03\xd3\x02\x66\xcc\x9c\x7a\xcd\x49\x4d\xaa\x06\xe0\x7b\xb3\x23\x1b\x93\x88\xcc\x8e\xfa\x10\x31\x6a\xf5\x0e\x23\xe3\x48\x27\xa1\x42\x9e\xf6\x3a\x83\x8e\x3d\xae\xdf\x2a\xb6\x6a\x22\x5a\x10\xe6\x7e\x63\xe4\x16\xb5\xe9\x3f\x94\x52\xc8\x56\x41\x9b\x85\x76\x51\x27\x82\x2b\xc1\x30\xb4\x5b\x3d\xbf\x6e\x67\xb8\x32\x0b\x55\xe3\x59\xb5\xe3\xe7\xec\x6e\x6b\xe7\xa4\x4c\x2d\xfb\x9f\x8f\x14\xb1\x0d\x2f\x27\x52\xa1\x11\xb3\xbc\xd3\x0a\xee\x2f\x14\xd0\xff\xd9\x9f\xff\xb2\x72\xf6\x8d\x5c\x4b\x91\xfd\xa5\xa2\x11\x1b\x8e\xb2\x5b\x30\xf5\xe2\xb1\x62\x79\x76\xa5\x3c\xb6\xdf\x23\x9b\x51\xd1\xce\x8a\xe5\x84\x38\x89\xca\xbf\xb5\xfc\x3b\x00\x00\xff\xff\xd0\xfa\x56\x0b\xc2\x19\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
