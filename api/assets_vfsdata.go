// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package api

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 10, 27, 15, 39, 47, 293145844, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2018, 11, 7, 14, 8, 49, 215662309, time.UTC),
			uncompressedSize: 6568,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\xdd\x72\xdb\x36\x16\xbe\xf7\x53\x9c\xd0\xbb\xa5\x14\x8b\xa4\x14\x8f\xe3\x9a\xa6\x94\x69\x1a\x7b\x9a\x6e\x9a\xee\xac\x33\xed\x85\xe3\xce\x40\xe4\x91\x84\x18\x04\x18\x00\x94\xac\x24\x7e\xf7\x1d\x80\x94\x08\x4a\xb4\xeb\xdd\xd9\x9b\xad\x95\xf1\x30\xc0\xf9\xfd\xce\x2f\xe5\xe4\x59\x10\xc0\x6b\xa2\x30\x03\xc1\x61\xa1\x75\xa1\xe2\x28\x9a\x32\x31\x0f\x35\x92\x5c\x4b\xc4\x85\x28\x15\x86\xa9\xc8\x23\xc2\x03\xca\xb5\x14\x59\x99\x6a\x2a\x78\xa0\x45\xb0\xc2\xa9\x12\xe9\x2d\x6a\x05\x41\x30\x39\x48\x16\x3a\x67\x93\x83\x83\x64\x81\x24\x9b\x1c\x00\x24\x4a\xaf\x19\x9a\x27\x80\xe7\x03\x78\x1e\x4f\x71\x26\x24\x9a\x27\x32\xd3\x28\xe1\xab\xbd\x32\x3f\x41\x2e\xbe\x04\x53\x71\x17\x28\xfa\x85\xf2\x79\x0c\x53\x21\x33\x94\xe6\xe8\xbc\x21\x5a\xe1\xf4\x96\xea\x3f\xa5\x7b\xfc\xfe\xfe\xa0\x7e\x30\xe6\x3a\x26\xcc\x04\xd7\xc1\x8c\xe4\x94\xad\x63\xf8\x09\xd9\x12\x35\x4d\xc9\x00\x7e\x90\x94\xb0\x01\x28\xc2\x55\xa0\x50\xd2\xd9\x79\x9b\x45\xd1\x2f\x18\xc3\x68\x38\xfc\xbb\x63\x01\x49\x6f\xe7\x52\x94\x3c\x8b\xe1\xf0\xf8\xf8\x78\x4f\xf7\x61\x41\xe6\x18\xac\x24\x29\x8a\x16\x0e\x2b\x9a\xe9\x45\x0c\x2f\x4f\x86\xc5\xdd\x03\xe2\x2e\x2f\x2f\x9b\x9b\x82\x64\x99\xf5\x73\x84\x79\x73\x9a\x13\x39\xa7\xdc\x1e\x02\x29\xb5\x70\xa1\xb1\x70\x68\x51\xc4\x70\x52\xdc\x81\x12\x8c\x66\x70\xf8\xf2\x2c\x3d\x3d\x3d\xde\x41\x70\x41\x32\xb1\x8a\x61\x08\x2f\x8a\x3b\x18\x0d\x8b\x3b\x90\xf3\x29\xe9\x0d\x07\xf6\x13\x7e\xdf\xdf\x47\x74\xe4\xb8\x52\x19\x51\xa9\x1a\xee\x03\xa0\x34\xd1\xa5\xda\xc5\xbf\x02\x73\x18\x9e\xc9\x7d\x7f\x82\xa9\xd0\x5a\xe4\x31\x8c\x9c\xcb\xad\xc0\x50\x14\xc8\x1d\x71\xa9\x60\x42\xc6\x30\x97\x88\x7c\x9f\x38\x65\xc2\xa4\xfd\x1e\xb9\xc4\xcc\x21\xae\x9f\x4a\x37\x4d\x18\x55\x3a\xb0\x89\x1d\x03\x17\x1c\xf7\x51\x1f\x76\x84\x67\xd8\x99\x34\xc3\xf0\xec\xa4\xcb\x97\x92\x01\xa3\x8e\xce\x46\x4c\x68\xe8\x61\x18\x9e\x9e\xb4\x00\xda\x66\x79\x0d\x50\x13\xd9\x8b\x8b\x8b\x6e\xf1\xf1\x8c\x4a\xa5\x83\x74\x41\x99\x8b\x83\x9b\x20\x4f\x11\x03\x19\x5d\xc6\x5c\x2f\x2a\x41\xbd\x17\x7d\x47\x96\xc6\x3b\x1d\x88\x25\xca\x19\x33\x89\x84\x8c\xd1\x42\x51\xd5\x98\xbd\x5a\x50\x8d\x81\x2a\x48\x6a\xc1\x34\xe5\xd0\x5c\x36\x8c\x0b\x9a\x65\x1d\x41\xac\xf4\xab\x82\xb8\x61\xcf\xa8\x2a\x18\x59\xc7\x40\x39\xa3\x1c\x83\x29\x13\xe9\xed\xf9\x6e\x7d\x9d\xb5\xca\xcb\x46\x64\x85\x74\xbe\xd0\xa6\x61\xb0\xec\x7c\x37\x2d\x0e\xcf\xce\xce\x1e\x88\xe0\x69\x2b\x10\xd6\x65\x2d\x09\x57\x33\x21\xf3\x18\x4a\x53\xdf\x29\x51\x4e\x9a\x30\xd4\x1a\xa5\xf5\xba\xaa\xdc\x62\xbf\x35\x85\x0a\xb9\x76\xa3\xb2\x6d\x00\xc1\xc6\xa2\xcb\x53\xf3\xd9\xaf\xab\x1c\x95\x32\xbd\xc5\xe8\x7f\xa0\x1a\x47\x61\x67\xd6\x19\xdb\x89\x44\xb2\xdf\x8e\xda\xcd\x6d\x27\x1b\xbb\xdb\x61\x47\x7a\xb6\x12\xea\xcd\x99\xf9\xec\x65\xb0\x24\x19\x2d\x55\x0c\xc7\xc5\x6e\x3f\xaf\xbb\x11\xe5\x0a\x35\x0c\xad\xa8\x51\xd3\x92\xa0\xfe\x17\x8e\xfa\x4e\x41\x52\x1e\x2c\xea\xb0\x8e\x86\xad\x90\x3f\xa5\xa3\x50\x5e\x94\xfa\xaf\x03\xc6\x13\x3c\x9e\x96\x5a\x8b\xff\xa0\x9a\x1e\xb7\xb3\x72\xb3\xdd\x23\x1f\x69\xf2\x0e\x92\x2f\x4d\x93\x6b\x4d\xb4\x3a\xeb\x6d\xc3\xe8\xe8\xb8\x30\x0c\x5f\x9c\xec\x17\x22\x61\x74\xce\x63\x48\x91\x6b\x94\x0f\x8c\xd3\xd7\x3f\x98\xcf\x53\x5a\xa9\xd3\x03\x76\x10\xbb\xd6\xeb\x02\xc7\x9e\x2a\xa7\x39\xd5\xde\x4d\x67\xe1\xc6\x70\xf8\xfd\xcb\xe9\xf1\x8b\xec\x29\xaa\x4e\xb2\xd3\x6c\x34\x7b\x40\x5b\xbc\x30\xad\xd1\x51\x22\x4c\x2b\xd1\x6b\xdb\x8d\x4e\x1c\xcc\x4a\xa9\x0c\x68\x85\xa0\xae\xff\x5b\x69\xe4\xa1\xe5\x27\x17\x5c\xd8\xa6\xbc\x03\x67\x86\xa9\x90\xc4\x6c\x7f\xbb\x61\xad\xc3\xd3\x76\x70\xab\xa8\x90\xf8\x68\x2f\x9b\x2f\x84\xd2\x3b\xa1\xdd\xaf\x12\x45\xd9\xd2\x8d\x62\xb3\xfa\x98\xd5\xe4\x45\x47\x79\xc7\xad\xd3\xa6\xb9\x7e\x52\x82\x07\xb7\xb8\xde\x1f\xff\x53\x29\x56\x1d\xdb\x82\x65\x58\x12\x56\xe2\x3e\x0b\x27\xcb\xf5\x03\x1c\x4a\x4b\xca\xe7\xfb\x2c\x82\xd1\x25\x36\x3c\xe6\x77\x12\x6d\x77\xe5\x44\xa5\x92\x16\xba\x5a\x9b\xa3\xc8\xa0\xa7\xf5\x1a\x0a\x49\xb9\x36\xe2\x66\x52\xe4\x76\x59\x8f\xa3\xe8\x93\x9a\xd1\x2c\x63\x18\x72\xd4\x51\xc9\xdf\x5d\xfd\x1c\x59\x36\x3a\x83\xde\x33\x46\xa7\x92\xc8\x75\xbf\x56\xb4\x24\x12\xea\x23\x18\xc3\xd7\xfb\xf3\xca\xd8\xfa\xc8\x5a\x6c\xce\x6b\x6a\x89\x05\x23\xa9\x89\xc0\xac\xe4\x76\xe3\x87\x5e\x4e\x74\xba\x18\x40\xf1\x96\x67\xc8\xf5\x00\x8a\x7f\xe0\x7a\x00\xc5\x6f\x66\x3d\x2e\x2e\x78\xe6\xce\x7e\xa3\xcd\x40\x3c\x06\x3f\xb1\x23\x3a\x65\x44\xa9\xf1\x06\xfa\x89\x7f\xde\x22\x5d\x12\xd6\x49\x6a\x41\xdf\x25\x56\x5a\x76\x12\x57\x78\xef\x52\x1b\xda\xda\x64\xf8\xf6\x0d\x7c\xe7\xda\xc0\x64\x9c\xe8\x6f\x4f\xc0\x92\x4b\x38\xb2\xc6\x1f\x59\x17\xc3\x1a\x8b\x5e\x74\xed\xc5\x70\x13\xcd\x07\xe0\xfb\x7d\x38\x02\x3f\x89\x8c\x09\x93\x18\x76\x65\xfe\x46\x58\x97\x4c\x7b\x71\x3d\xbc\x81\xf1\x18\x7c\xcf\x87\x57\xd6\x95\xd8\x78\x6f\xe4\x99\x5b\x47\xac\x23\x54\xa2\x2e\x25\xaf\x65\x5c\xf0\xac\x72\xa4\x59\xc0\x07\x4d\xa5\x69\xbd\xfe\xa7\x49\x15\x37\x70\x62\xfa\x69\x37\x36\x06\xb0\x77\x94\x23\x8c\x21\xfa\xa3\x07\xcf\xfb\x3d\xef\xfa\xe3\xea\xe6\xc8\x8b\xa1\xff\xaa\xe7\x5d\xff\xe1\xdd\x3c\xf7\xbe\x5d\x7f\x5c\x85\x47\xc1\xcd\xf3\xfe\xab\xde\xf5\xe0\xfa\xeb\x4d\xff\xd5\xdf\xa2\x7c\xbe\x67\xd7\xcf\x57\xbf\xbe\x0f\x2b\xf4\xe9\x6c\x6d\xd4\x0d\x80\x97\x8c\x0d\xe0\xd8\x85\xa1\x01\xf2\x3b\x0b\xe2\x77\x24\x2f\xce\xfd\x7e\x73\xfc\xf1\xa3\x57\x5d\x7c\x2e\x85\x3e\xf7\xbb\x79\x93\x8a\x84\xe9\x16\xeb\xa4\x3a\x9d\x3f\xc4\xb6\xf1\x77\xd0\x4a\xf8\xcd\xb5\xec\xb7\xcb\xf1\xde\xfc\x37\x89\x36\x95\x98\x44\xd5\x2b\xed\x41\x32\x15\xd9\xda\x16\x69\x46\x97\x40\xb3\xb1\xe7\xbe\xc7\x79\x55\xcd\x26\x8b\xe3\xc9\x7b\x9a\x0b\x4e\x60\xfb\x86\x0c\x78\x47\xf2\x82\x61\x12\x2d\x8e\x6b\xaa\x8d\x84\xea\x45\xc8\x9b\xfc\x28\x38\xc7\xd4\x94\x78\x18\x86\x49\x94\xd1\xe5\xa4\xaa\xd0\xc4\xae\x72\x86\xd4\xdd\xed\x3c\x20\x36\xba\x63\xef\xd0\x83\x1c\xf5\x42\x18\x6b\x84\xd2\xb5\x15\x00\xc9\x76\xa1\x73\x78\x3d\xb0\x0e\x2f\x04\xcb\x50\x8e\xbd\xdf\x25\xd5\x08\x6b\x51\x4a\xa8\x09\x60\x81\x12\xc3\x30\xf4\x40\xe2\xe7\x92\x4a\xcc\x26\x49\xb4\x91\xb4\x15\x5d\xed\x46\x46\xae\xc4\x94\x16\x14\xb9\xde\x91\xfc\xaf\xcd\xb9\xaf\x4c\x2d\x35\xe2\x20\xda\x4a\xa9\xf7\x8d\xd6\xf4\x9c\x5c\x21\xcf\xe0\x97\xca\x98\x24\xaa\x48\x6a\xc8\x22\xe3\xf8\x06\x95\x92\xb9\x7e\x29\x6f\x92\x44\x25\xb3\xb1\xd9\x62\xd7\x6a\xa5\xa5\xb4\x2d\x66\xa5\xe2\x28\xf2\xe1\x08\x98\x48\xed\x2c\x0b\xcd\xf4\xe1\x24\x47\x53\x5c\xdb\xc3\x42\x48\x0d\xaf\xc0\x8f\x5b\xa4\xf6\x34\xde\x94\x7f\x44\x0a\x1a\x2d\x47\x91\xd2\x12\x49\xae\x22\x6e\x83\x1e\x52\x11\xd5\x46\xf9\x75\x8f\x5d\x51\x9e\x89\x55\x28\x38\x13\x24\x83\xb1\x53\x99\x4d\x59\x9a\xa2\xb4\x81\x1e\x43\x26\xd2\x32\x47\xae\xc3\x39\xea\x0b\x86\xe6\xf1\xf5\xfa\x6d\xd6\xf3\xdd\xf8\x37\xd5\x6f\x38\xeb\x9b\x4b\x8a\x2c\x7b\x82\x84\x36\xf3\x36\x84\x7f\xca\xbe\xa5\xec\xd4\xae\xde\x51\xa5\x9f\xa0\x5d\xb5\xb9\xab\x0a\xb9\xaa\xbe\x0f\x78\x84\xbb\x2a\x14\xc3\x5b\x33\x6f\x29\x3f\x97\x28\xd7\x57\xc8\x30\xd5\x42\xf6\x7c\x53\xa4\x7e\x3f\x24\x59\x76\xb1\x44\xae\x8d\x55\xc8\x51\xf6\xfc\x94\xd1\xf4\xd6\x1f\x38\xf8\xa3\xdb\x17\x4d\xeb\xc6\x50\x13\x39\x47\x1d\xda\xb9\xf2\x9e\xe4\x18\x6a\xf1\x4e\xac\x50\xfe\x48\x14\xf6\xfa\x30\x36\xbd\xdb\xcc\x60\xdf\x65\x85\x1d\x10\xc3\x6a\x5b\x18\xc3\x56\x5e\x46\x34\x51\xa8\xc3\x5b\x5c\x37\xfd\xf3\x7e\xd3\x75\x1a\xa7\x52\x18\x03\xc7\x15\xfc\x8e\xd3\x2b\x0b\x4c\xaf\x94\x6c\x8b\x57\x1a\x0a\x6e\xbf\xe8\x70\x93\x08\x8d\x97\xae\x35\x2e\xa2\x21\xe5\x1c\xe5\x4f\x1f\x7e\x79\x67\xb2\xbf\x6e\x32\x98\x81\x16\x31\x98\xdc\xb6\xcc\x61\x5a\x4a\x89\x5c\x7f\xa8\x6c\x2d\x25\x3b\xef\x16\xb6\x45\xc5\x08\x33\x86\x6c\x87\xd4\xfd\xd6\x03\x93\x9d\xa1\xe0\x55\x3d\xb7\x0d\x75\x8d\xc4\xb0\x90\x56\xf9\x1b\x9c\x91\x92\xe9\x5e\xbf\x3d\xb7\x4d\x14\x61\xdc\xca\xec\x0a\xd5\x9d\xf1\xbe\xc1\xdd\xe4\xce\x75\x57\x14\x6e\x76\xe4\x9a\x77\x18\x67\xd3\x31\x3f\xa6\x03\xc5\xe0\xed\x15\xb0\x37\x70\x88\x0a\xb2\x36\xf5\x1b\xb7\x38\xc1\xda\x19\xdb\xdf\x83\xd6\xb9\xa6\x39\x2a\x4d\xf2\x22\x86\x9e\x09\xe8\x1b\xa2\xb1\xd7\xef\x87\x5a\xbc\xbd\xfa\xf5\xca\x0e\xcb\x9e\x3b\xaa\xee\x07\x5d\xd9\xa4\x62\xe7\x79\xb0\x97\x38\x26\x23\x14\xf2\xac\xb7\x33\x82\xad\x93\xfd\xfe\xde\xa4\x9e\x11\xd6\x7c\x17\xd1\x84\xcc\xa4\x15\x4a\x29\x64\x3b\x5c\xe6\xa4\xdf\xda\x5f\xb9\x12\x0c\x43\x7b\xd1\xf3\xb7\x29\x0a\x17\xe6\xa0\xce\x27\xcb\xd4\xad\x62\x33\x62\x5c\x25\xb9\x9a\xef\xee\x26\x9b\x08\x59\x9f\x0a\x22\x15\x1a\x2a\x5b\x41\xfd\xf3\x3d\x63\x98\x98\xd7\xee\xb6\x0a\xf9\xd9\x33\x7b\x18\x8a\x15\x47\xd9\x2e\x55\xb7\x5d\xb5\xcb\x23\x61\xb4\x5e\x28\xcd\x5c\x43\xba\xc4\xcc\x9b\xf8\x70\xd4\x0a\xac\x6f\x46\xf7\xc4\x6e\x9f\x93\x7a\x4e\xc5\x9b\x95\x0d\x8e\x2a\xeb\xc3\x3a\x59\x42\x9b\xc5\x76\xa7\x33\x4c\x8f\x89\xba\x94\x22\xdf\xc8\x49\x08\x2c\x24\xce\xec\x6c\xaf\xed\x31\x2d\xc7\x03\x83\x81\xd9\x9f\xc7\x5e\xa3\xca\x7a\x68\x74\x78\x93\x8e\xc3\x24\x22\x93\x87\x94\x47\x8c\x5a\x96\x6e\x40\x9a\x64\x03\x64\x0a\xff\x0f\x20\xfc\x20\xfe\x2b\x00\x9b\x02\x33\xbb\xf9\x0e\x90\x7b\x97\xff\x0b\x40\xdb\xcb\xe6\x41\x6b\xd9\x3c\x48\xa2\x6a\xcb\x34\x6b\xa7\xfd\x8b\xca\xbf\x03\x00\x00\xff\xff\xa3\xd2\x4a\x38\xa8\x19\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
