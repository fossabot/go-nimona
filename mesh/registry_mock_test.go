// Code generated by mockery v1.0.0. DO NOT EDIT.
package mesh

import mock "github.com/stretchr/testify/mock"

// MockRegistry is an autogenerated mock type for the Registry type
type MockRegistry struct {
	mock.Mock
}

// GetAllPeerInfo provides a mock function with given fields:
func (_m *MockRegistry) GetAllPeerInfo() ([]*PeerInfo, error) {
	ret := _m.Called()

	var r0 []*PeerInfo
	if rf, ok := ret.Get(0).(func() []*PeerInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*PeerInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLocalPeerInfo provides a mock function with given fields:
func (_m *MockRegistry) GetLocalPeerInfo() *PeerInfo {
	ret := _m.Called()

	var r0 *PeerInfo
	if rf, ok := ret.Get(0).(func() *PeerInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PeerInfo)
		}
	}

	return r0
}

// GetPeerInfo provides a mock function with given fields: peerID
func (_m *MockRegistry) GetPeerInfo(peerID string) (*PeerInfo, error) {
	ret := _m.Called(peerID)

	var r0 *PeerInfo
	if rf, ok := ret.Get(0).(func(string) *PeerInfo); ok {
		r0 = rf(peerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PeerInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(peerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutLocalPeerInfo provides a mock function with given fields: _a0
func (_m *MockRegistry) PutLocalPeerInfo(_a0 *PeerInfo) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*PeerInfo) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutPeerInfo provides a mock function with given fields: _a0
func (_m *MockRegistry) PutPeerInfo(_a0 *PeerInfo) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*PeerInfo) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
